#!/usr/bin/php
<?php

require_once __DIR__ . '/token.php';

// This file is generated by Composer
require_once __DIR__ . '/vendor/autoload.php';

$pool = new \Cache\Adapter\Apcu\ApcuCachePool();

$client = new \Github\Client();
$client->addCache($pool);

$client->authenticate($token, '', \Github\AuthMethod::ACCESS_TOKEN);

$organizationApi = $client->api('organization');

$paginator  = new Github\ResultPager($client);

$workflows = $paginator->fetchAll($client->api('repo')->contents(), 'show', ['nextcloud', '.github', 'workflow-templates', 'master']);
$workflows = array_filter(
	array_map(
		fn ($file) => $file['name'],
		$workflows
	),
	fn ($name) => str_ends_with($name, '.yml')
);
sort($workflows);

if (isset($argv[1])) {
	array_shift($argv);
	$repositories = [];
	foreach ($argv as $reponame) {
		$repositories[] = $client->api('repo')->show('nextcloud', $reponame);
	}
} else {
	$repositories = $paginator->fetchAll($organizationApi, 'repositories', ['nextcloud', 'public']);

	$repositories = array_filter(
		$repositories,
		fn($repo) =>
			$client->api('repo')->contents()->exists('nextcloud', $repo['name'], 'appinfo/info.xml', 'master')
			|| $client->api('repo')->contents()->exists('nextcloud', $repo['name'], 'appinfo/info.xml', 'main')
	);
}

usort(
	$repositories,
	fn ($repo1, $repo2) => $repo1['name'] <=> $repo2['name'],
);

foreach ($repositories as $repo) {
	//var_dump($repo);
	echo "\n# {$repo['name']} (Created: {$repo['created_at']}, Last push: {$repo['pushed_at']})\n";
	try {
		$client->api('repo')->branches('nextcloud', $repo['name'], 'stable24');
		$appInfo = getAppInfo($client, 'nextcloud', $repo['name'], 'stable24');
		echo "* stable24: version {$appInfo->version} (Nextcloud {$appInfo->dependencies->nextcloud['min-version']} to {$appInfo->dependencies->nextcloud['max-version']})\n";
	} catch (Github\Exception\RuntimeException $e) {
		if ($e->getMessage() === 'Branch not found') {
			echo "* Branch stable24 is missing\n";
		} else {
			throw $e;
		}
	}
	try {
		$lastRelease = $client->api('repo')->releases()->latest('nextcloud', $repo['name']);
		$appInfo = getAppInfo($client, 'nextcloud', $repo['name'], $lastRelease['tag_name']);
		echo "* Last release: {$lastRelease['name']} ({$lastRelease['tag_name']}) - version {$appInfo->version} (Nextcloud {$appInfo->dependencies->nextcloud['min-version']} to {$appInfo->dependencies->nextcloud['max-version']})\n";
	} catch (Github\Exception\RuntimeException $e) {
		if ($e->getMessage() === 'Not Found') {
			echo "* No release yet\n";
		} else {
			throw $e;
		}
	}
	$lastPrerelease = $client->api('repo')->releases()->all('nextcloud', $repo['name'])[0];
	if ($lastPrerelease['tag_name'] !== ($lastRelease['tag_name'] ?? null)) {
		$appInfo = getAppInfo($client, 'nextcloud', $repo['name'], $lastPrerelease['tag_name']);
		echo "* Last release: {$lastPrerelease['name']} ({$lastPrerelease['tag_name']}) - version {$appInfo->version} (Nextcloud {$appInfo->dependencies->nextcloud['min-version']} to {$appInfo->dependencies->nextcloud['max-version']})\n";
	}
	foreach ($workflows as $workflow) {
		if (
			!$client->api('repo')->contents()->exists('nextcloud', $repo['name'], '.github/workflows/'.$workflow, 'master') &&
			!$client->api('repo')->contents()->exists('nextcloud', $repo['name'], '.github/workflows/'.$workflow, 'main')
		) {
			echo "* $workflow is missing\n";
		}
	}
}

function getAppInfo ($client, string $org, string $app, string $reference): SimpleXMLElement {
	$fileContent = $client->api('repo')->contents()->download($org, $app, 'appinfo/info.xml', $reference);
	return new SimpleXMLElement($fileContent);
}
/*
["open_issues"]=>
  int(15)
 ["open_issues_count"]=>
  int(15)*/

/* TODO
 * Deviner si les workflow ont du sens?
 * Checker les releases, sauf si bundle
 * Vérifier les commandes composer?
 * Checker si les workflows diffèrent
 * Checker les versions compatibles déclarées dans master et stable24
 * Checker les versions PHP compatibles pour chaque branche?
 * Checker les dépendances composer
 */
